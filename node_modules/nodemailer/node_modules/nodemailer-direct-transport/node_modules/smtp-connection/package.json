{
  "name": "smtp-connection",
  "version": "0.1.7",
  "description": "Connect to SMTP servers",
  "main": "src/smtp-connection.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/andris9/smtp-connection.git"
  },
  "keywords": [
    "SMTP"
  ],
  "author": {
    "name": "Andris Reinman"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/andris9/smtp-connection/issues"
  },
  "homepage": "https://github.com/andris9/smtp-connection",
  "devDependencies": {
    "chai": "~1.8.1",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-mocha-test": "~0.10.0",
    "simplesmtp": "^0.3.32",
    "sinon": "^1.9.0",
    "xoauth2": "^0.1.8"
  },
  "readme": "# smtp-connection\n\nConnect to SMTP servers\n\nThis is a fork of [simplesmtp](https://github.com/andris9/simplesmtp). Includes only the client and nothing more. API is simplified and should be easier to use.\n\n## Usage\n\nInstall with npm\n\n    npm install smtp-connection\n\nRequire in your script\n\n    var SMTPConnection = require('smtp-connection');\n\n### Create SMTPConnection instance\n\n```javascript\nvar connection = new SMTPConnection(options);\n```\n\nWhere\n\n  * **options** defines connection data\n    * **options.port** is the port to connect to (defaults to 25 or 465)\n    * **options.host** is the hostname or IP address to connect to (defaults to 'localhost')\n    * **options.secure** defines if the connection should use SSL (if `true`) or not (if `false`)\n    * **options.ignoreTLS** turns off STARTTLS support if true\n    * **options.name** optional hostname of the client, used for identifying to the server\n    * **options.localAddress** is the local interface to bind to for network connections\n    * **options.connectionTimeout** how many milliseconds to wait for the connection to establish\n    * **options.greetingTimeout** how many milliseconds to wait for the greeting after connection is established\n    * **options.socketTimeout** how many milliseconds of inactivity to allow\n    * **options.debug** if true, the connection emits all traffic between client and server as 'log' events\n    * **options.authMethod** defines preferred authentication method, eg. 'PLAIN'\n    * **options.tls** defines additional options to be passed to the socket constructor, eg. *{rejectUnauthorized: true}*\n\n### Events\n\nSMTPConnection instances are event emitters with the following events\n\n  * **'error'** *(err)* emitted when an error occurs. Connection is closed automatically in this case.\n  * **'connect'** emitted when the connection is established\n  * **'end'** when the instance is destroyed\n  * **'log'** *(data)* emitted for all traffic when debug option is set to true\n\n### connect\n\nEstablish the connection\n\n```javascript\nconnection.connect(callback)\n```\n\nWhere\n\n  * **callback** is the function to run once the connection is established. The function is added as a listener to the 'connect' event.\n\n### login\n\nIf the server requires authentication you can login with\n\n```javascript\nconnection.login(auth, callback)\n```\n\nWhere\n\n  * **auth** is the authentication object\n    * **auth.user** is the username\n    * **auth.pass** is the password for the user\n    * **auth.xoauth2** is the OAuth2 access token (preferred if both `pass` and `xoauth2` values are set) or an [XOAuth2](https://github.com/andris9/xoauth2) token generator object.\n  * **callback** is the callback to run once the authentication is finished. Callback has the following arugments\n    * **err** and error object if authentication failed\n\nIf a [XOAuth2](https://github.com/andris9/xoauth2) token generator is used as the value for `auth.xoauth2` then you do not need to set `auth.user`. XOAuth2 generator generates required accessToken itself if it is missing or expired. In this case if the authentication fails, a new token is requeested and the authentication is retried. If it still fails, an error is returned.\n\n**XOAuth2 Example**\n\n```javascript\nvar generator = require('xoauth2').createXOAuth2Generator({\n    user: '{username}',\n    clientId: '{Client ID}',\n    clientSecret: '{Client Secret}',\n    refreshToken: '{refresh-token}'\n});\n\n// listen for token updates\n// you probably want to store these to a db\ngenerator.on('token', function(token){\n    console.log('New token for %s: %s', token.user, token.accessToken);\n});\n\n// login\nconnection.login({\n    xoauth2: generator\n}, callback);\n```\n\n### send\n\nOnce the connection is authenticated (or just after connection is established if authentication is not required), you can send mail with\n\n```javascript\nconnection.send(envelope, message, callback)\n```\n\nWhere\n\n  * **envelope** is the envelope object to use\n    * **envelope.from** is the sender address\n    * **envelope.to** is the recipient address or an array of addresses\n  * **message** is either a String, Buffer or a Stream. All newlines in converted to \\r\\n and all dots are escaped automatically, no need to convert anything before.\n  * **callback** is the callback to run once the sending is finished or failed. Callback has the following arugments\n    * **err** and error object if sending failed\n      * **code** string code identifying the error, for example 'EAUTH' is returned when authentication fails\n      * **response** is the last response received from the server (if the error is caused by an error response from the server)\n      * **responseCode** is the numeric response code of the `response` string (if available)\n    * **info** information object about accepted and rejected recipients\n      * **acepted** and array of accepted recipient addresses\n      * **rejected** and array of rejected recipient addresses\n      * **response** is the last response received from the server\n\n### quit\n\nUse it for graceful disconnect\n\n```javascript\nconnection.quite();\n```\n\n### close\n\nUse it for less graceful disconnect\n\n```javascript\nconnection.close();\n```\n\n## License\n\n**MIT**",
  "readmeFilename": "README.md",
  "_id": "smtp-connection@0.1.7",
  "dist": {
    "shasum": "b1d5d2a799936da5a69778b69e9d741e9a86e84e"
  },
  "_from": "smtp-connection@^0.1.5",
  "_resolved": "https://registry.npmjs.org/smtp-connection/-/smtp-connection-0.1.7.tgz"
}
